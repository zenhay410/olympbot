import telebot
from telebot.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
import json

TOKEN = "7807718978:AAEE4pDJSrnDHHDh8uW4mPoumCaMwBoYq_s"
bot = telebot.TeleBot(TOKEN)

ITEMS_PER_PAGE = 5

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===

def load_json(path):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def save_json(data, path):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

# === –ê–í–¢–û-–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ===

def ensure_user(uid):
    users = load_json("users.json")
    if uid not in users:
        users[uid] = {
            "email": "",
            "password": "",
            "subscriptions": [],
            "notify_days_before": 2
        }
        save_json(users, "users.json")

# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===

def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üìã –°–ø–∏—Å–æ–∫ –æ–ª–∏–º–ø–∏–∞–¥", "üìå –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
    kb.row("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    kb.row("‚ùì –ü–æ–º–æ—â—å")
    return kb

@bot.message_handler(commands=["start"])
def start(m):
    uid = str(m.chat.id)
    ensure_user(uid)
    bot.send_message(m.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu())

@bot.message_handler(func=lambda m: m.text == "‚ùì –ü–æ–º–æ—â—å")
def help_cmd(m):
    bot.send_message(m.chat.id,
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        "üìã –°–ø–∏—Å–æ–∫ –æ–ª–∏–º–ø–∏–∞–¥ ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä\n"
        "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è ‚Äî –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "üìå –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî —Å–ø–∏—Å–æ–∫ –∏ –æ—Ç–ø–∏—Å–∫–∞\n"
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
    )

# === –°–ü–ò–°–û–ö –û–õ–ò–ú–ü–ò–ê–î –ü–û –°–¢–†–ê–ù–ò–¶–ê–ú ===

def get_olympiad_page(page, action="none"):
    olympiads = load_json("olympiads.json")
    total = len(olympiads)
    start = page * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE
    page_data = olympiads[start:end]

    text = f"üìã –û–ª–∏–º–ø–∏–∞–¥—ã (—Å—Ç—Ä. {page+1}):\n\n"
    kb = InlineKeyboardMarkup()

    for o in page_data:
        dt = datetime.fromisoformat(o["datetime"]).strftime("%d.%m.%Y %H:%M")
        text += f"{o['id']}. {o['title']} ‚Äî {dt}\n"
        if action == "subscribe":
            kb.add(InlineKeyboardButton(f"‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {o['id']}", callback_data=f"sub:{o['id']}"))
        elif action == "unsubscribe":
            kb.add(InlineKeyboardButton(f"‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç {o['id']}", callback_data=f"unsub:{o['id']}"))

    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page:{action}:{page-1}"))
    if end < total:
        nav.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"page:{action}:{page+1}"))
    if nav:
        kb.row(*nav)

    return text, kb

@bot.message_handler(func=lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –æ–ª–∏–º–ø–∏–∞–¥")
def show_list(m):
    text, kb = get_olympiad_page(0, action="none")
    bot.send_message(m.chat.id, text, reply_markup=kb)

# === –ü–û–î–ü–ò–°–ö–ê ===

@bot.message_handler(func=lambda m: m.text == "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
def show_subscribe_menu(m):
    ensure_user(str(m.chat.id))
    text, kb = get_olympiad_page(0, action="subscribe")
    bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ª–∏–º–ø–∏–∞–¥—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=kb)

@bot.callback_query_handler(func=lambda call: call.data.startswith("sub:"))
def handle_subscribe(call):
    uid = str(call.from_user.id)
    oid = int(call.data.split(":")[1])
    users = load_json("users.json")
    ensure_user(uid)

    if oid not in users[uid]["subscriptions"]:
        users[uid]["subscriptions"].append(oid)
        save_json(users, "users.json")
        bot.answer_callback_query(call.id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {oid} –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!")
    else:
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

# === –ú–û–ò –ü–û–î–ü–ò–°–ö–ò + –û–¢–ü–ò–°–ö–ê ===

@bot.message_handler(func=lambda m: m.text == "üìå –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
def show_my_subs(m):
    uid = str(m.chat.id)
    ensure_user(uid)
    users = load_json("users.json")
    olympiads = load_json("olympiads.json")

    subs = users[uid]["subscriptions"]
    if not subs:
        bot.send_message(m.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.")
        return

    text = "üìå –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
    kb = InlineKeyboardMarkup()
    for o in olympiads:
        if o["id"] in subs:
            dt = datetime.fromisoformat(o["datetime"]).strftime("%d.%m.%Y %H:%M")
            text += f"{o['id']}. {o['title']} ‚Äî {dt}\n"
            kb.add(InlineKeyboardButton(f"‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç {o['id']}", callback_data=f"unsub:{o['id']}"))
    bot.send_message(m.chat.id, text, reply_markup=kb)

@bot.callback_query_handler(func=lambda call: call.data.startswith("unsub:"))
def handle_unsubscribe(call):
    uid = str(call.from_user.id)
    oid = int(call.data.split(":")[1])
    users = load_json("users.json")
    ensure_user(uid)

    if oid in users[uid]["subscriptions"]:
        users[uid]["subscriptions"].remove(oid)
        save_json(users, "users.json")
        bot.answer_callback_query(call.id, f"‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {oid} —É–¥–∞–ª–µ–Ω–∞.")
    else:
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

# === –ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–ê–ì–ò–ù–ê–¶–ò–ò ===

@bot.callback_query_handler(func=lambda call: call.data.startswith("page:"))
def handle_page_nav(call):
    _, action, page = call.data.split(":")
    page = int(page)
    text, kb = get_olympiad_page(page, action=action)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=text,
        reply_markup=kb
    )

# === –ù–ê–°–¢–†–û–ô–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===

@bot.message_handler(func=lambda m: m.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def show_settings_hint(m):
    bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /settings <–¥–Ω–µ–π>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /settings 2")

@bot.message_handler(commands=["settings"])
def handle_settings(m):
    uid = str(m.chat.id)
    ensure_user(uid)
    users = load_json("users.json")
    args = m.text.split()

    if len(args) != 2 or not args[1].isdigit():
        bot.send_message(m.chat.id, "–ü—Ä–∏–º–µ—Ä: /settings 2")
        return

    days = int(args[1])
    users[uid]["notify_days_before"] = days
    save_json(users, "users.json")
    bot.send_message(m.chat.id, f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ {days} –¥–Ω–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π")
bot.polling()
