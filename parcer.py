from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from datetime import datetime
import json, pathlib, time

# === –ø—É—Ç—ë–≤–∫–∏ –∫ Chrome / chromedriver ===
CHROME_PATH  = r"C:/Program Files/Google/Chrome/Application/chrome.exe"
DRIVER_PATH  = r"C:/Users/Son/Desktop/chromedriver-win64/chromedriver.exe"

YEARS  = [2023, 2024, 2025]
MONTHS = range(1, 13)
BASE   = "https://postypashki.ru/ecwd_calendar/calendar/?date={y}-{m}-1&t=list"
OUT_JSON = "olympiads.json"

# --- Selenium setup ---
opt = webdriver.ChromeOptions()
opt.binary_location = CHROME_PATH
opt.add_experimental_option("detach", True)
service = Service(DRIVER_PATH)
driver  = webdriver.Chrome(service=service, options=opt)
wait    = WebDriverWait(driver, 15)

def grab_events():
    titles = driver.find_elements(By.CSS_SELECTOR, "h3.event-title a")
    dates  = driver.find_elements(By.CSS_SELECTOR, ".ecwd-date .metainfo")
    times  = driver.find_elements(By.CSS_SELECTOR, ".ecwd-time .metainfo")
    return [
        (t.text.strip(), d.text.strip(), tm.text.strip())
        for t, d, tm in zip(titles, dates, times)
    ]

data = []
id_counter = 1

def extract_first_part(text: str) -> str:
    # —É–±–∏—Ä–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã: "01.01.2023‚Äì03.01.2023" => "01.01.2023"
    return text.split("-")[0].strip().split("‚Äì")[0].strip()

try:
    for y in YEARS:
        for m in MONTHS:
            url = BASE.format(y=y, m=m)
            driver.get(url)

            try:
                wait.until(EC.presence_of_element_located(
                    (By.CSS_SELECTOR, ".ecwd-page-full")
                ))
            except:
                print(f"‚ö†Ô∏è  {y}-{m:02}: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –æ—Ç–∫—Ä—ã–ª–∞—Å—å.")
                continue

            time.sleep(1.5)
            month_events = grab_events()
            if month_events:
                print(f"‚úÖ  {y}-{m:02}: {len(month_events)} —à—Ç.")
                for title, date_str, time_str in month_events:
                    try:
                        clean_date = extract_first_part(date_str)
                        clean_time = extract_first_part(time_str)

                        dt = datetime.strptime(f"{clean_date} {clean_time}", "%d.%m.%Y %H:%M")

                        data.append({
                            "id": id_counter,
                            "title": title,
                            "datetime": dt.isoformat(),
                            "url": "https://postypashki.ru"
                        })
                        id_counter += 1
                    except Exception as e:
                        print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–∞—Ç–æ–π: {title} ‚Äî {date_str} {time_str}")
                        continue
            else:
                print(f"‚Äî  {y}-{m:02}: –ø—É—Å—Ç–æ")

    if data:
        out = pathlib.Path(__file__).with_name(OUT_JSON)
        with open(out, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(data)} –æ–ª–∏–º–ø–∏–∞–¥ ‚Üí {OUT_JSON}")
    else:
        print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

finally:
    pass  # –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å driver.quit() –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –æ–∫–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–ª–æ—Å—å
